from typing import Dict, NamedTuple

from uaclient import config, exceptions, messages
from uaclient.api.u.pro.security.vulnerabilities.cve.v1 import (
    CVEVulnerabilitiesOptions,
)
from uaclient.api.u.pro.security.vulnerabilities.cve.v1 import (
    _vulnerabilities_with_applied_fixes_count as cve_vulnerabilities,
)
from uaclient.api.u.pro.security.vulnerabilities.usn.v1 import (
    USNVulnerabilitiesOptions,
)
from uaclient.api.u.pro.security.vulnerabilities.usn.v1 import (
    _vulnerabilities_with_applied_fixes_count as usn_vulnerabilities,
)
from uaclient.cli.commands import ProArgument, ProArgumentGroup, ProCommand
from uaclient.cli.formatter import Table
from uaclient.cli.vulnerability import util as vuln_util

VulnerabilityCountInfo = NamedTuple(
    "VulnerabilityCountInfo",
    [("count", int), ("count_by_priority", Dict[str, int])],
)


def _print_usn_table(usns):
    usns_sorted_by_name = sorted(usns, key=lambda usn: usn.name)

    print(
        Table(
            headers=[
                "VULNERABILITY",
                "FIX AVAILABLE FROM",
                "AFFECTED INSTALLED PACKAGES",
            ],
            rows=[
                [
                    usn.name,
                    ", ".join(
                        set(
                            [
                                pkg.fix_available_from or "no-fix"
                                for pkg in usn.affected_packages
                            ]
                        )
                    ),
                    ", ".join(
                        set([pkg.name for pkg in usn.affected_packages])
                    ),
                ]
                for usn in usns_sorted_by_name
            ],
        )
    )


def _print_cve_table(cves):
    cves_sorted_by_priority = sorted(
        cves,
        key=lambda cve: (
            vuln_util.CVE_PRIORITIES.index(cve.ubuntu_priority),
            cve.name,
        ),
    )

    print(
        Table(
            headers=[
                "VULNERABILITY",
                "PRIORITY",
                "FIX AVAILABLE FROM",
                "AFFECTED INSTALLED PACKAGES",
            ],
            rows=[
                [
                    cve.name,
                    vuln_util.get_priority_with_color(cve.ubuntu_priority),
                    ", ".join(
                        set(
                            [
                                pkg.fix_available_from or "no-fix"
                                for pkg in cve.affected_packages
                            ]
                        )
                    ),
                    ", ".join(
                        set([pkg.name for pkg in cve.affected_packages])
                    ),
                ]
                for cve in cves_sorted_by_priority
            ],
        )
    )


def _get_info_from_vulnerabilities(vulnerabilities, fixable_vuln: bool):
    count = 0
    vulnerability_count_info = {}  # type: Dict[str, int]

    for vuln in vulnerabilities:
        if (vuln.fixable == "yes") is fixable_vuln:
            count += 1

            if not getattr(vuln, "ubuntu_priority", None):
                continue

            if vuln.ubuntu_priority in vulnerability_count_info:
                vulnerability_count_info[vuln.ubuntu_priority] += 1
            else:
                vulnerability_count_info[vuln.ubuntu_priority] = 1

    return VulnerabilityCountInfo(
        count=count,
        count_by_priority=vulnerability_count_info,
    )


def _get_fixable_color_count(fixable_vulnerabilities_info):
    if "critical" in fixable_vulnerabilities_info.count_by_priority:
        main_color = messages.TxtColor.FAIL
    elif "high" in fixable_vulnerabilities_info.count_by_priority:
        main_color = messages.TxtColor.ORANGE
    elif "medium" in fixable_vulnerabilities_info.count_by_priority:
        main_color = messages.TxtColor.WARNINGYELLOW
    elif "low" in fixable_vulnerabilities_info.count_by_priority:
        main_color = messages.TxtColor.INFOBLUE
    else:
        main_color = ""

    if main_color:
        return "{}{}{}".format(
            main_color,
            str(fixable_vulnerabilities_info.count),
            messages.TxtColor.ENDC,
        )

    return str(fixable_vulnerabilities_info.count)


def _get_count_msg_by_priority(count_by_priority):
    msgs = []
    sorted_priority_count = sorted(
        count_by_priority.items(),
        key=lambda item: vuln_util.CVE_PRIORITIES.index(item[0]),
    )

    for priority, count in sorted_priority_count:
        if count:
            msgs.append(
                "{} {}".format(
                    count, vuln_util.get_priority_with_color(priority)
                )
            )

    return ", ".join(msgs)


def _print_fixable_cves_count(vulnerabilities):
    print(messages.CLI_VULNERABILITY_LIST_FIXES_AVAILABLE_HEADER)
    fixable_vulnerabilities_info = _get_info_from_vulnerabilities(
        vulnerabilities, fixable_vuln=True
    )
    count_with_color = _get_fixable_color_count(fixable_vulnerabilities_info)
    print(
        "    "
        + count_with_color
        + " "
        + messages.CLI_VULNERABILITY_LIST_FIXES_AVAILABLE_COUNT
        + " ("
        + _get_count_msg_by_priority(
            fixable_vulnerabilities_info.count_by_priority
        )
        + ")"
        + "\n"
    )


def _print_fixable_usns_count(vulnerabilities):
    print(messages.CLI_VULNERABILITY_LIST_FIXES_AVAILABLE_HEADER)
    fixable_vulnerabilities_info = _get_info_from_vulnerabilities(
        vulnerabilities, fixable_vuln=True
    )
    print(
        "    "
        + str(fixable_vulnerabilities_info.count)
        + " "
        + messages.CLI_VULNERABILITY_LIST_FIXES_AVAILABLE_COUNT
        + "\n"
    )


def _print_unfixable_cves_count(vulnerabilities):
    print(messages.CLI_VULNERABILITY_LIST_UNFIXABLE_AVAILABLE_HEADER)
    unfixable_vulnerabilities_info = _get_info_from_vulnerabilities(
        vulnerabilities, fixable_vuln=False
    )
    print(
        "    "
        + str(unfixable_vulnerabilities_info.count)
        + " "
        + messages.CLI_VULNERABILITY_LIST_UNFIXABLE_AVAILABLE_COUNT
        + " ("
        + _get_count_msg_by_priority(
            unfixable_vulnerabilities_info.count_by_priority
        )
        + ")"
        + "\n"
    )


def _print_unfixable_usns_count(vulnerabilities):
    print(messages.CLI_VULNERABILITY_LIST_UNFIXABLE_AVAILABLE_HEADER)
    unfixable_vulnerabilities_info = _get_info_from_vulnerabilities(
        vulnerabilities, fixable_vuln=False
    )
    print(
        "    "
        + str(unfixable_vulnerabilities_info.count)
        + " "
        + messages.CLI_VULNERABILITY_LIST_UNFIXABLE_AVAILABLE_COUNT
        + "\n"
    )


def _print_already_fixed_cves_count(applied_fixes_count):
    if any(count for pocket, count in applied_fixes_count["count"].items()):
        print(messages.CLI_VULNERABILITY_LIST_FIXES_APPLIED_HEADER)
        for pocket, count in applied_fixes_count["count"].items():
            if not count:
                continue

            print(
                "    "
                + "{}{}{} ".format(
                    messages.TxtColor.DISABLEGREY,
                    str(count),
                    messages.TxtColor.ENDC,
                )
                + messages.CLI_VULNERABILITY_LIST_FIXES_APPLIED_COUNT
                + " {}".format(pocket.title().replace("_", " "))
                + " ("
                + _get_count_msg_by_priority(
                    applied_fixes_count.get("info", {}).get(pocket, {})
                )
                + ")"
                + "\n"
            )


def _print_already_fixed_usns_count(applied_fixes_count):
    if any(count for pocket, count in applied_fixes_count["count"].items()):
        print(messages.CLI_VULNERABILITY_LIST_FIXES_APPLIED_HEADER)
        for pocket, count in applied_fixes_count["count"].items():
            if not count:
                continue

            print(
                "    "
                + str(count)
                + " "
                + messages.CLI_VULNERABILITY_LIST_FIXES_APPLIED_COUNT
                + " {}".format(pocket.title().replace("_", " "))
                + "\n",
            )


def _display_list_header(
    vulnerabilities,
    applied_fixes_count,
    show_usns: bool,
    show_all: bool,
    show_unfixable: bool,
):
    if show_usns:
        _print_already_fixed_usns_count(applied_fixes_count)

        if show_all:
            _print_fixable_usns_count(vulnerabilities)
            _print_unfixable_usns_count(vulnerabilities)
        elif show_unfixable:
            _print_unfixable_usns_count(vulnerabilities)
        else:
            _print_fixable_usns_count(vulnerabilities)
    else:
        _print_already_fixed_cves_count(applied_fixes_count)
        if show_all:
            _print_fixable_cves_count(vulnerabilities)
            _print_unfixable_cves_count(vulnerabilities)
        elif show_unfixable:
            _print_unfixable_cves_count(vulnerabilities)
        else:
            _print_fixable_cves_count(vulnerabilities)


def _list_cves(
    cfg: config.UAConfig,
    show_all: bool,
    show_unfixable: bool,
    data_file: str,
    manifest_file: str,
    series: str,
):
    cve_vulnerabilities_result, applied_fixes_count = cve_vulnerabilities(
        options=CVEVulnerabilitiesOptions(
            all=show_all,
            unfixable=show_unfixable,
            data_file=data_file,
            manifest_file=manifest_file,
            series=series,
        ),
        cfg=cfg,
    )

    if cve_vulnerabilities_result.cves:
        _display_list_header(
            vulnerabilities=cve_vulnerabilities_result.cves,
            applied_fixes_count=applied_fixes_count,
            show_usns=False,
            show_all=show_all,
            show_unfixable=show_unfixable,
        )
        print(messages.CLI_VULNERABILITY_LIST_CVE_HEADER)
        _print_cve_table(cve_vulnerabilities_result.cves)


def _list_usns(
    cfg: config.UAConfig,
    show_all: bool,
    show_unfixable: bool,
    data_file: str,
    manifest_file: str,
    series: str,
):
    usn_vulnerabilities_result, applied_fixes_count = usn_vulnerabilities(
        options=USNVulnerabilitiesOptions(
            all=show_all,
            unfixable=show_unfixable,
            data_file=data_file,
            manifest_file=manifest_file,
            series=series,
        ),
        cfg=cfg,
    )

    if usn_vulnerabilities_result.usns:
        _display_list_header(
            vulnerabilities=usn_vulnerabilities_result.usns,
            applied_fixes_count=applied_fixes_count,
            show_usns=True,
            show_all=show_all,
            show_unfixable=show_unfixable,
        )
        print(messages.CLI_VULNERABILITY_LIST_USN_HEADER)
        _print_usn_table(usn_vulnerabilities_result.usns)


@vuln_util.assert_data_cache_updated("pro vulnerability list")
def action_list(args, *, cfg, **kwargs):
    if args.unfixable and args.all:
        raise exceptions.InvalidOptionCombination(
            option1="unfixable", option2="all"
        )

    if args.usns:
        _list_usns(
            cfg=cfg,
            show_all=args.all,
            show_unfixable=args.unfixable,
            data_file=args.data_file,
            manifest_file=args.manifest_file,
            series=args.series,
        )
    else:
        _list_cves(
            cfg=cfg,
            show_all=args.all,
            show_unfixable=args.unfixable,
            data_file=args.data_file,
            manifest_file=args.manifest_file,
            series=args.series,
        )


list_subcommand = ProCommand(
    "list",
    help=messages.CLI_VULNERABILITY_LIST,
    description=messages.CLI_VULNERABILITY_LIST_DESC,
    action=action_list,
    preserve_description=True,
    argument_groups=[
        ProArgumentGroup(
            arguments=[
                ProArgument(
                    "--data-file",
                    help=messages.CLI_VULNERABILITY_DATA_FILE,
                    action="store",
                ),
                ProArgument(
                    "--all",
                    help=messages.CLI_VULNERABILITY_LIST_ALL,
                    action="store_true",
                ),
                ProArgument(
                    "--usns",
                    help=messages.CLI_VULNERABILITY_LIST_USNS,
                    action="store_true",
                ),
                ProArgument(
                    "--unfixable",
                    help=messages.CLI_VULNERABILITY_LIST_UNFIXABLE,
                    action="store_true",
                ),
                ProArgument(
                    "--manifest-file",
                    help=messages.CLI_VULNERABILITY_LIST_MANIFEST_FILE,
                    action="store",
                ),
                ProArgument(
                    "--series",
                    help=messages.CLI_VULNERABILITY_LIST_SERIES,
                    action="store",
                ),
                ProArgument(
                    "--update",
                    help=messages.CLI_VULNERABILITY_UPDATE,
                    action="store_true",
                ),
            ]
        )
    ],
)
