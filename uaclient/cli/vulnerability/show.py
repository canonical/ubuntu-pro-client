from typing import Optional
from urllib.parse import urljoin

from uaclient import config, defaults, messages, util
from uaclient.api.u.pro.security.vulnerabilities.cve.v1 import (
    CVEVulnerabilitiesOptions,
)
from uaclient.api.u.pro.security.vulnerabilities.cve.v1 import (
    _vulnerabilities as cve_vulnerabilities,
)
from uaclient.api.u.pro.security.vulnerabilities.usn.v1 import (
    USNVulnerabilitiesOptions,
)
from uaclient.api.u.pro.security.vulnerabilities.usn.v1 import (
    _vulnerabilities as usn_vulnerabilities,
)
from uaclient.cli import cli_util
from uaclient.cli.commands import ProArgument, ProArgumentGroup, ProCommand
from uaclient.cli.formatter import Table
from uaclient.cli.vulnerability import util as vuln_util


def _show_base_info_for_unaffected_issue(vulnerability_result, name: str):
    print(util.handle_unicode_characters("● {}".format(name)))
    print(
        messages.CLI_VULNERABILITY_SHOW_PUBLIC_URL.format(
            urljoin(defaults.BASE_SECURITY_URL, name)
        )
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_JSON_PUBLISHED_AT.format(
            vulnerability_result.vulnerability_data_published_at.strftime(  # noqa
                "%Y-%m-%d %H:%M:%S"
            )
        )
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_APT_UPDATED_AT.format(
            vulnerability_result.apt_updated_at.strftime("%Y-%m-%d %H:%M:%S")
        )
    )


def _show_base_info(vulnerability_result, vulnerability_issue):
    print(
        util.handle_unicode_characters("● {}".format(vulnerability_issue.name))
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_PUBLIC_URL.format(
            urljoin(defaults.BASE_SECURITY_URL, vulnerability_issue.name)
        )
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_PUBLISHED_AT.format(
            vulnerability_issue.published_at.strftime("%Y-%m-%d %H:%M:%S")
        )
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_JSON_PUBLISHED_AT.format(
            vulnerability_result.vulnerability_data_published_at.strftime(  # noqa
                "%Y-%m-%d %H:%M:%S"
            )
        )
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_APT_UPDATED_AT.format(
            vulnerability_result.apt_updated_at.strftime("%Y-%m-%d %H:%M:%S")
        )
    )


def _show_description(vulnerability_issue):
    print(
        "\n"
        + messages.CLI_VULNERABILITY_SHOW_DESCRIPTION.format(
            vulnerability_issue.description
        )
        + "\n"
    )


def _show_cve_affected_packages(vulnerability_issue):
    print(
        messages.CLI_VULNERABILITY_SHOW_AFFECTED_PKGS
        + str(
            Table(
                headers=[
                    "NAME",
                    "STATUS",
                    "CURRENT VERSION",
                    "FIXED BY",
                    "FIX AVAILABLE FROM",
                ],
                rows=[
                    [
                        pkg.name,
                        pkg.fix_status,
                        pkg.current_version,
                        pkg.fix_version or "-",
                        pkg.fix_available_from or "no-fix",
                    ]
                    for pkg in vulnerability_issue.affected_packages
                ],
            )
        )
    )


def _show_usn_affected_packages(vulnerability_issue):
    print(
        messages.CLI_VULNERABILITY_SHOW_AFFECTED_PKGS
        + str(
            Table(
                headers=[
                    "NAME",
                    "CURRENT VERSION",
                    "FIXED BY",
                    "FIX AVAILABLE FROM",
                ],
                rows=[
                    [
                        pkg.name,
                        pkg.current_version,
                        pkg.fix_version or "-",
                        pkg.fix_available_from or "no-fix",
                    ]
                    for pkg in vulnerability_issue.affected_packages
                ],
            )
        )
    )


def _show_related_usns(related_usns):
    rows = [
        [
            usn.name,
            usn.title,
            ", ".join(usn.affected_installed_packages),
        ]
        for usn in related_usns
        if usn.title
    ]

    if rows:
        print(
            messages.CLI_VULNERABILITY_SHOW_RELATED_USNS
            + str(
                Table(
                    headers=[
                        "VULNERABILITY",
                        "TITLE",
                        "AFFECTED INSTALLED PACKAGES",
                    ],
                    rows=rows,
                )
            )
            + "\n"
        )


def _show_related_cves(related_cves):
    print(
        messages.CLI_VULNERABILITY_SHOW_RELATED_CVES
        + str(
            Table(
                headers=[
                    "VULNERABILITY",
                    "PRIORITY",
                    "AFFECTED INSTALLED PACKAGES",
                ],
                rows=[
                    [
                        cve.name,
                        vuln_util.get_priority_with_color(cve.priority),
                        ", ".join(cve.affected_installed_packages),
                    ]
                    for cve in related_cves
                ],
            )
        )
        + "\n"
    )


def _show_cve_info(cfg: config.UAConfig, cve: str, data_file: Optional[str]):
    cve_vulnerabilities_result = cve_vulnerabilities(
        options=CVEVulnerabilitiesOptions(all=True, data_file=data_file),
        cfg=cfg,
    )

    cve_data = None
    for cve_info in cve_vulnerabilities_result.cves:
        if cve_info.name == cve:
            cve_data = cve_info
            break

    if not cve_data:
        _show_base_info_for_unaffected_issue(
            cve_vulnerabilities_result, name=cve
        )
        print(
            "\n"
            + messages.CLI_VULNERABILITY_SHOW_NOT_AFFECTED.format(issue=cve)
        )
        return

    _show_base_info(cve_vulnerabilities_result, cve_data)
    print(
        messages.CLI_VULNERABILITY_SHOW_UBUNTU_PRIORITY.format(
            cve_info.ubuntu_priority
        )
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_CVSS_SCORE.format(cve_info.cvss_score)
    )
    print(
        messages.CLI_VULNERABILITY_SHOW_CVSS_SEVERITY.format(
            cve_info.cvss_severity
        )
    )
    _show_description(cve_data)
    _show_cve_affected_packages(cve_data)

    if cve_data.notes:
        print(
            messages.CLI_VULNERABILITY_SHOW_NOTES.format(
                "\n".join(note for note in cve_data.notes)
            )
            + "\n"
        )

    _show_related_usns(cve_data.related_usns)


def _show_usn_info(cfg: config.UAConfig, usn: str, data_file: Optional[str]):
    usn_vulnerabilities_result = usn_vulnerabilities(
        options=USNVulnerabilitiesOptions(
            all=True,
            data_file=data_file,
        ),
        cfg=cfg,
    )

    usn_data = None
    for usn_info in usn_vulnerabilities_result.usns:
        if usn_info.name == usn:
            usn_data = usn_info
            break

    if not usn_data:
        _show_base_info_for_unaffected_issue(
            usn_vulnerabilities_result, name=usn
        )
        print(
            "\n"
            + messages.CLI_VULNERABILITY_SHOW_NOT_AFFECTED.format(issue=usn)
        )
        return

    _show_base_info(usn_vulnerabilities_result, usn_data)
    _show_description(usn_data)
    _show_usn_affected_packages(usn_data)

    if usn_data.related_cves:
        _show_related_cves(usn_data.related_cves)


@cli_util.assert_vulnerability_issue_valid(cmd="vulnerability show")
@vuln_util.assert_data_cache_updated(
    cmd="pro vulnerability show <vulnerability_issue>"
)
def action_show(args, *, cfg, **kwargs):
    if args.security_issue.startswith("CVE"):
        _show_cve_info(
            cfg=cfg, cve=args.security_issue, data_file=args.data_file
        )
    else:
        _show_usn_info(
            cfg=cfg, usn=args.security_issue, data_file=args.data_file
        )

    return 0


show_subcommand = ProCommand(
    "show",
    help=messages.CLI_VULNERABILITY_SHOW,
    description=messages.CLI_VULNERABILITY_SHOW_DESC,
    action=action_show,
    preserve_description=True,
    argument_groups=[
        ProArgumentGroup(
            arguments=[
                ProArgument(
                    "security_issue",
                    help=messages.CLI_VULNERABILITY_SHOW_ISSUE,
                ),
                ProArgument(
                    "--data-file",
                    help=messages.CLI_VULNERABILITY_DATA_FILE,
                    action="store",
                ),
                ProArgument(
                    "--update",
                    help=messages.CLI_VULNERABILITY_UPDATE,
                    action="store_true",
                ),
            ]
        )
    ],
)
