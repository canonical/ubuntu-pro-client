from functools import wraps

from uaclient import messages
from uaclient.api.u.pro.security.vulnerabilities._common.v1 import (
    VulnerabilityData,
)


def _parse_cache_time_diff(cache_time_diff) -> int:
    if cache_time_diff.days >= 1:
        return cache_time_diff.days

    return round(cache_time_diff.total_seconds() / 3600)


def assert_data_cache_updated(cmd):
    def wrapper(f):
        @wraps(f)
        def new_f(args, *, cfg, **kwargs):
            vulnerability_data = VulnerabilityData(cfg)
            cache_valid, cache_time_diff = vulnerability_data.is_cache_valid()
            if not cache_valid and cache_time_diff:
                print(
                    messages.CLI_VULNERABILITY_DATE_OUTDATED.format(
                        t_diff=_parse_cache_time_diff(cache_time_diff),
                        cmd=cmd,
                    )
                )

            retval = f(args, cfg=cfg, **kwargs)
            return retval

        return new_f

    return wrapper


def get_priority_with_color(priority):
    if priority == "low":
        return messages.TxtColor.INFOBLUE + priority + messages.TxtColor.ENDC
    elif priority == "medium":
        return (
            messages.TxtColor.WARNINGYELLOW + priority + messages.TxtColor.ENDC
        )
    elif priority == "high":
        return messages.TxtColor.ORANGE + priority + messages.TxtColor.ENDC
    else:
        return messages.TxtColor.FAIL + priority + messages.TxtColor.ENDC
